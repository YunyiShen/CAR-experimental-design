B <- matrix(rnorm(k*p),p,k)
B0 <- B + matrix(rnorm(k*p,0,0.5),p,k)
psi <- .01 * diag(k)
phi <- .01 * diag(k)
Lambda1 <- prior_cert[1] * diag(p) # less uncertainty
Lambda2 <- prior_cert[2] * diag(p) # more uncertainty
lambda <- k
# object with results
MGIG_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
MGIG_active_uncert <- MGIG_random_uncert <- MGIG_active_cert <- MGIG_random_cert
Wishart_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
Wishart_random_uncert <- Wishart_random_cert
no_exp <- MGIG_random_cert
### place to save results
prior_class <- c("MGIG_AL_","MGIG_rand_","Wishart_rand_")
simu_designs <- as.matrix( expand.grid(prior_class,prior_cert))
design_name <- apply( as.matrix(simu_designs),1,paste0,collapse = "")
design_name <- c(design_name, "no_exp")
file_names_last <- paste0("_k",k,".csv" )
all_file_name <- paste0(file_names_base,design_name,file_names_last)
### start the simulation
for(i_rep in 1:n_reps){
## initial samples
n <- n_init
X_init <- matrix( sign( runif(n * p, -1,1 )) , n , p )
Y_init <- simu_data(X_init,B,Sigma)
Y_no_exp <- simu_data(0 * X_init,B,Sigma)
cat("Round:", i_rep,"Initial estimation\n")
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda2)
MAP_Omega_mrc <- MAP_Omega_mac <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- MAP_Omega_mau <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda2)
MAP_B_mac <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda1, MAP_Omega_mac)
MAP_B_mau <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda2,MAP_Omega_mau)
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_init, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
#Lambda_hat_design <- Lambda_hat
Y_r <- Y_mac  <- Y_mau <- Y_init
X_r <- X_mac  <- X_mau <- X_init
MGIG_random_cert[i_rep,1] <- MGIG_active_cert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
MGIG_random_uncert[i_rep,1] <- MGIG_active_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
Wishart_random_cert[i_rep,1]  <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
for(i_step in 1:n_steps + 1){
# get data
n <- n + step_size
cat("  step :" , i_step, " Random Design..\n")
## Random, all random share the same design
X_rand_temp <- matrix(runif(step_size * p,-1,1),step_size,p)
Y_rand_temp <- simu_data(X_rand_temp, B, Sigma)
Y_nexp_temp <- simu_data(0 * X_rand_temp, B, Sigma)
X_r <- rbind(X_r, X_rand_temp)
Y_r <- rbind(Y_r, Y_rand_temp)
Y_no_exp <- rbind(Y_no_exp, Y_nexp_temp)
### result of Wishart prior
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda2)
### result of MGIG prior
MAP_Omega_mrc <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda2)
### result of no experiment
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_r, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
### save random designs and no exp
MGIG_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mrc)
MGIG_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mru)
Wishart_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
## active learning
# cat("  step :" , i_step, " D-optimal Design..\n")
# X_al_mau <- Design_D_opt(MAP_B_mau, solve(MAP_Omega_mau),
#                          phi, Lambda2, lambda, step_size, X_mau)
# X_al_mac <-  Design_D_opt(MAP_B_mac, solve(MAP_Omega_mac),
#                           phi, Lambda1, lambda, step_size, X_mac)
#
# Y_al_mau <- simu_data(X_al_mau, B, Sigma)
# Y_al_mac <- simu_data(X_al_mac, B, Sigma)
#
# X_mau <- rbind(X_mau, X_al_mau)
# Y_mau <- rbind(Y_mau, Y_al_mau)
#
# X_mac <- rbind(X_mac, X_al_mac)
# Y_mac <- rbind(Y_mac, Y_al_mac)
#
#
# MAP_Omega_mac <- getMAP_Omega_MGIG(Y_mac, X_mac, B0, phi, psi,lambda, Lambda1)
# MAP_Omega_mau <- getMAP_Omega_MGIG(Y_mau, X_mac, B0, phi, psi,lambda, Lambda2)
#
# MAP_B_mac <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda1, MAP_Omega_mac)
# MAP_B_mau <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda2,MAP_Omega_mau)
#
#
# MGIG_active_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
# MGIG_active_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
write.csv(MGIG_active_cert,all_file_name[1],row.names = F)
write.csv(MGIG_random_cert,all_file_name[2],row.names = F)
write.csv(Wishart_random_cert,all_file_name[3],row.names = F)
write.csv(MGIG_active_uncert,all_file_name[4],row.names = F)
write.csv(MGIG_random_uncert,all_file_name[5],row.names = F)
write.csv(Wishart_random_uncert,all_file_name[6],row.names = F)
write.csv(no_exp,all_file_name[7],row.names = F)
plot_out <- data.frame(step = 0:n_steps * step_size + n_init,
mrc <- t(as.matrix(MGIG_random_cert[i_rep, ])),
mac <- t(as.matrix(MGIG_active_cert[i_rep, ])),
mru <- t(as.matrix(MGIG_random_uncert[i_rep, ])),
mau <- t(as.matrix(MGIG_active_uncert[i_rep, ])),
wrc <- t(as.matrix(Wishart_random_cert[i_rep, ])),
wru <- t(as.matrix(Wishart_random_uncert[i_rep, ])),
nex <- t(as.matrix(no_exp[i_rep, ])),
row.names = NULL)
matplot(plot_out[,1], plot_out[,2:8], type = "l",xlab = "sample size", ylab = "Stein's loss",lty = 1:7,col = 1:7)
legend("topright", legend = c("mrc","mac","mru","mau","wrc","wru","nex"),lty = 1:7,col = 1:7)
}
}
library(rMGIG)
library(MASS)
source("./Code/Graph_generator.R")
source("./Code/utils.R")
k <- 100
p <- k
prior_cert <- c(1e-5,1e2)
step_size <- 10
n_steps <- 30
n_reps <- 20
n_init <- 150
file_names_base <- "./Res/Model1_0B_"
G <- g_model1(k)
Omega <- G$Omega
Sigma <- G$Sigma
set.seed(42)
B <- matrix(rnorm(k*p),p,k)
B0 <- B + matrix(rnorm(k*p,0,0.25),p,k)
psi <- .01 * diag(k)
phi <- .01 * diag(k)
Lambda1 <- prior_cert[1] * diag(p) # less uncertainty
Lambda2 <- prior_cert[2] * diag(p) # more uncertainty
lambda <- k
# object with results
MGIG_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
MGIG_active_uncert <- MGIG_random_uncert <- MGIG_active_cert <- MGIG_random_cert
Wishart_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
Wishart_random_uncert <- Wishart_random_cert
no_exp <- MGIG_random_cert
### place to save results
prior_class <- c("MGIG_AL_","MGIG_rand_","Wishart_rand_")
simu_designs <- as.matrix( expand.grid(prior_class,prior_cert))
design_name <- apply( as.matrix(simu_designs),1,paste0,collapse = "")
design_name <- c(design_name, "no_exp")
file_names_last <- paste0("_k",k,".csv" )
all_file_name <- paste0(file_names_base,design_name,file_names_last)
### start the simulation
for(i_rep in 1:n_reps){
## initial samples
n <- n_init
X_init <- matrix( sign( runif(n * p, -1,1 )) , n , p )
Y_init <- simu_data(X_init,B,Sigma)
Y_no_exp <- simu_data(0 * X_init,B,Sigma)
cat("Round:", i_rep,"Initial estimation\n")
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda2)
MAP_Omega_mrc <- MAP_Omega_mac <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- MAP_Omega_mau <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda2)
MAP_B_mac <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda1, MAP_Omega_mac)
MAP_B_mau <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda2,MAP_Omega_mau)
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_init, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
#Lambda_hat_design <- Lambda_hat
Y_r <- Y_mac  <- Y_mau <- Y_init
X_r <- X_mac  <- X_mau <- X_init
MGIG_random_cert[i_rep,1] <- MGIG_active_cert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
MGIG_random_uncert[i_rep,1] <- MGIG_active_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
Wishart_random_cert[i_rep,1]  <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
for(i_step in 1:n_steps + 1){
# get data
n <- n + step_size
cat("  step :" , i_step, " Random Design..\n")
## Random, all random share the same design
X_rand_temp <- matrix(runif(step_size * p,-1,1),step_size,p)
Y_rand_temp <- simu_data(X_rand_temp, B, Sigma)
Y_nexp_temp <- simu_data(0 * X_rand_temp, B, Sigma)
X_r <- rbind(X_r, X_rand_temp)
Y_r <- rbind(Y_r, Y_rand_temp)
Y_no_exp <- rbind(Y_no_exp, Y_nexp_temp)
### result of Wishart prior
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda2)
### result of MGIG prior
MAP_Omega_mrc <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda2)
### result of no experiment
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_r, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
### save random designs and no exp
MGIG_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mrc)
MGIG_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mru)
Wishart_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
## active learning
# cat("  step :" , i_step, " D-optimal Design..\n")
# X_al_mau <- Design_D_opt(MAP_B_mau, solve(MAP_Omega_mau),
#                          phi, Lambda2, lambda, step_size, X_mau)
# X_al_mac <-  Design_D_opt(MAP_B_mac, solve(MAP_Omega_mac),
#                           phi, Lambda1, lambda, step_size, X_mac)
#
# Y_al_mau <- simu_data(X_al_mau, B, Sigma)
# Y_al_mac <- simu_data(X_al_mac, B, Sigma)
#
# X_mau <- rbind(X_mau, X_al_mau)
# Y_mau <- rbind(Y_mau, Y_al_mau)
#
# X_mac <- rbind(X_mac, X_al_mac)
# Y_mac <- rbind(Y_mac, Y_al_mac)
#
#
# MAP_Omega_mac <- getMAP_Omega_MGIG(Y_mac, X_mac, B0, phi, psi,lambda, Lambda1)
# MAP_Omega_mau <- getMAP_Omega_MGIG(Y_mau, X_mac, B0, phi, psi,lambda, Lambda2)
#
# MAP_B_mac <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda1, MAP_Omega_mac)
# MAP_B_mau <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda2,MAP_Omega_mau)
#
#
# MGIG_active_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
# MGIG_active_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
write.csv(MGIG_active_cert,all_file_name[1],row.names = F)
write.csv(MGIG_random_cert,all_file_name[2],row.names = F)
write.csv(Wishart_random_cert,all_file_name[3],row.names = F)
write.csv(MGIG_active_uncert,all_file_name[4],row.names = F)
write.csv(MGIG_random_uncert,all_file_name[5],row.names = F)
write.csv(Wishart_random_uncert,all_file_name[6],row.names = F)
write.csv(no_exp,all_file_name[7],row.names = F)
plot_out <- data.frame(step = 0:n_steps * step_size + n_init,
mrc <- t(as.matrix(MGIG_random_cert[i_rep, ])),
mac <- t(as.matrix(MGIG_active_cert[i_rep, ])),
mru <- t(as.matrix(MGIG_random_uncert[i_rep, ])),
mau <- t(as.matrix(MGIG_active_uncert[i_rep, ])),
wrc <- t(as.matrix(Wishart_random_cert[i_rep, ])),
wru <- t(as.matrix(Wishart_random_uncert[i_rep, ])),
nex <- t(as.matrix(no_exp[i_rep, ])),
row.names = NULL)
matplot(plot_out[,1], plot_out[,2:8], type = "l",xlab = "sample size", ylab = "Stein's loss",lty = 1:7,col = 1:7)
legend("topright", legend = c("mrc","mac","mru","mau","wrc","wru","nex"),lty = 1:7,col = 1:7)
}
}
library(rMGIG)
library(MASS)
source("./Code/Graph_generator.R")
source("./Code/utils.R")
k <- 100
p <- k
prior_cert <- c(1e-5,1e2)
step_size <- 10
n_steps <- 30
n_reps <- 20
n_init <- 150
file_names_base <- "./Res/Model1_noisy0.2B0_"
G <- g_model1(k)
Omega <- G$Omega
Sigma <- G$Sigma
set.seed(42)
B <- diag(k)
B0 <- B + matrix(rnorm(k*p,0,0.2),p,k)
psi <- .01 * diag(k)
phi <- .01 * diag(k)
Lambda1 <- prior_cert[1] * diag(p) # less uncertainty
Lambda2 <- prior_cert[2] * diag(p) # more uncertainty
lambda <- k
# object with results
MGIG_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
MGIG_active_uncert <- MGIG_random_uncert <- MGIG_active_cert <- MGIG_random_cert
Wishart_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
Wishart_random_uncert <- Wishart_random_cert
no_exp <- MGIG_random_cert
### place to save results
prior_class <- c("MGIG_AL_","MGIG_rand_","Wishart_rand_")
simu_designs <- as.matrix( expand.grid(prior_class,prior_cert))
design_name <- apply( as.matrix(simu_designs),1,paste0,collapse = "")
design_name <- c(design_name, "no_exp")
file_names_last <- paste0("_k",k,".csv" )
all_file_name <- paste0(file_names_base,design_name,file_names_last)
### start the simulation
for(i_rep in 1:n_reps){
## initial samples
n <- n_init
X_init <- matrix( sign( runif(n * p, -1,1 )) , n , p )
Y_init <- simu_data(X_init,B,Sigma)
Y_no_exp <- simu_data(0 * X_init,B,Sigma)
cat("Round:", i_rep,"Initial estimation\n")
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda2)
MAP_Omega_mrc <- MAP_Omega_mac <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- MAP_Omega_mau <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda2)
MAP_B_mac <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda1, MAP_Omega_mac)
MAP_B_mau <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda2,MAP_Omega_mau)
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_init, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
#Lambda_hat_design <- Lambda_hat
Y_r <- Y_mac  <- Y_mau <- Y_init
X_r <- X_mac  <- X_mau <- X_init
MGIG_random_cert[i_rep,1] <- MGIG_active_cert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
MGIG_random_uncert[i_rep,1] <- MGIG_active_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
Wishart_random_cert[i_rep,1]  <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
for(i_step in 1:n_steps + 1){
# get data
n <- n + step_size
cat("  step :" , i_step, " Random Design..\n")
## Random, all random share the same design
X_rand_temp <- matrix(runif(step_size * p,-1,1),step_size,p)
Y_rand_temp <- simu_data(X_rand_temp, B, Sigma)
Y_nexp_temp <- simu_data(0 * X_rand_temp, B, Sigma)
X_r <- rbind(X_r, X_rand_temp)
Y_r <- rbind(Y_r, Y_rand_temp)
Y_no_exp <- rbind(Y_no_exp, Y_nexp_temp)
### result of Wishart prior
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda2)
### result of MGIG prior
MAP_Omega_mrc <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda2)
### result of no experiment
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_r, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
### save random designs and no exp
MGIG_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mrc)
MGIG_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mru)
Wishart_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
## active learning
# cat("  step :" , i_step, " D-optimal Design..\n")
# X_al_mau <- Design_D_opt(MAP_B_mau, solve(MAP_Omega_mau),
#                          phi, Lambda2, lambda, step_size, X_mau)
# X_al_mac <-  Design_D_opt(MAP_B_mac, solve(MAP_Omega_mac),
#                           phi, Lambda1, lambda, step_size, X_mac)
#
# Y_al_mau <- simu_data(X_al_mau, B, Sigma)
# Y_al_mac <- simu_data(X_al_mac, B, Sigma)
#
# X_mau <- rbind(X_mau, X_al_mau)
# Y_mau <- rbind(Y_mau, Y_al_mau)
#
# X_mac <- rbind(X_mac, X_al_mac)
# Y_mac <- rbind(Y_mac, Y_al_mac)
#
#
# MAP_Omega_mac <- getMAP_Omega_MGIG(Y_mac, X_mac, B0, phi, psi,lambda, Lambda1)
# MAP_Omega_mau <- getMAP_Omega_MGIG(Y_mau, X_mac, B0, phi, psi,lambda, Lambda2)
#
# MAP_B_mac <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda1, MAP_Omega_mac)
# MAP_B_mau <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda2,MAP_Omega_mau)
#
#
# MGIG_active_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
# MGIG_active_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
write.csv(MGIG_active_cert,all_file_name[1],row.names = F)
write.csv(MGIG_random_cert,all_file_name[2],row.names = F)
write.csv(Wishart_random_cert,all_file_name[3],row.names = F)
write.csv(MGIG_active_uncert,all_file_name[4],row.names = F)
write.csv(MGIG_random_uncert,all_file_name[5],row.names = F)
write.csv(Wishart_random_uncert,all_file_name[6],row.names = F)
write.csv(no_exp,all_file_name[7],row.names = F)
plot_out <- data.frame(step = 0:n_steps * step_size + n_init,
mrc <- t(as.matrix(MGIG_random_cert[i_rep, ])),
mac <- t(as.matrix(MGIG_active_cert[i_rep, ])),
mru <- t(as.matrix(MGIG_random_uncert[i_rep, ])),
mau <- t(as.matrix(MGIG_active_uncert[i_rep, ])),
wrc <- t(as.matrix(Wishart_random_cert[i_rep, ])),
wru <- t(as.matrix(Wishart_random_uncert[i_rep, ])),
nex <- t(as.matrix(no_exp[i_rep, ])),
row.names = NULL)
matplot(plot_out[,1], plot_out[,2:8], type = "l",xlab = "sample size", ylab = "Stein's loss",lty = 1:7,col = 1:7)
legend("topright", legend = c("mrc","mac","mru","mau","wrc","wru","nex"),lty = 1:7,col = 1:7)
}
}
library(rMGIG)
library(MASS)
source("./Code/Graph_generator.R")
source("./Code/utils.R")
k <- 100
p <- k
prior_cert <- c(1e-5,1e2)
step_size <- 10
n_steps <- 30
n_reps <- 20
n_init <- 150
file_names_base <- "./Res/Model1_noisy0.2B0_"
G <- g_model1(k)
Omega <- G$Omega
Sigma <- G$Sigma
set.seed(42)
B <- diag(k)
B0 <- B # + matrix(rnorm(k*p,0,0.2),p,k)
psi <- .01 * diag(k)
phi <- .01 * diag(k)
Lambda1 <- prior_cert[1] * diag(p) # less uncertainty
Lambda2 <- prior_cert[2] * diag(p) # more uncertainty
lambda <- k
# object with results
MGIG_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
MGIG_active_uncert <- MGIG_random_uncert <- MGIG_active_cert <- MGIG_random_cert
Wishart_random_cert <- data.frame(matrix(NA, nrow = n_reps, ncol = n_steps+1))
Wishart_random_uncert <- Wishart_random_cert
no_exp <- MGIG_random_cert
### place to save results
prior_class <- c("MGIG_AL_","MGIG_rand_","Wishart_rand_")
simu_designs <- as.matrix( expand.grid(prior_class,prior_cert))
design_name <- apply( as.matrix(simu_designs),1,paste0,collapse = "")
design_name <- c(design_name, "no_exp")
file_names_last <- paste0("_k",k,".csv" )
all_file_name <- paste0(file_names_base,design_name,file_names_last)
### start the simulation
for(i_rep in 1:n_reps){
## initial samples
n <- n_init
X_init <- matrix( sign( runif(n * p, -1,1 )) , n , p )
Y_init <- simu_data(X_init,B,Sigma)
Y_no_exp <- simu_data(0 * X_init,B,Sigma)
cat("Round:", i_rep,"Initial estimation\n")
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_init, X_init, B0 %*% Sigma, phi, lambda, Lambda2)
MAP_Omega_mrc <- MAP_Omega_mac <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- MAP_Omega_mau <- getMAP_Omega_MGIG(Y_init, X_init, B0, phi, psi,lambda, Lambda2)
MAP_B_mac <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda1, MAP_Omega_mac)
MAP_B_mau <- getMAP_B_MGIG(Y_init, X_init, B0, Lambda2,MAP_Omega_mau)
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_init, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
#Lambda_hat_design <- Lambda_hat
Y_r <- Y_mac  <- Y_mau <- Y_init
X_r <- X_mac  <- X_mau <- X_init
MGIG_random_cert[i_rep,1] <- MGIG_active_cert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
MGIG_random_uncert[i_rep,1] <- MGIG_active_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
Wishart_random_cert[i_rep,1]  <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,1] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
for(i_step in 1:n_steps + 1){
# get data
n <- n + step_size
cat("  step :" , i_step, " Random Design..\n")
## Random, all random share the same design
X_rand_temp <- matrix(runif(step_size * p,-1,1),step_size,p)
Y_rand_temp <- simu_data(X_rand_temp, B, Sigma)
Y_nexp_temp <- simu_data(0 * X_rand_temp, B, Sigma)
X_r <- rbind(X_r, X_rand_temp)
Y_r <- rbind(Y_r, Y_rand_temp)
Y_no_exp <- rbind(Y_no_exp, Y_nexp_temp)
### result of Wishart prior
MAP_Omega_wrc <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda1)
MAP_Omega_wru <- getMAP_Omega_Wishart(Y_r, X_r, B0 %*% Sigma, phi, lambda, Lambda2)
### result of MGIG prior
MAP_Omega_mrc <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda1)
MAP_Omega_mru <- getMAP_Omega_MGIG(Y_r, X_r, B0, phi, psi,lambda, Lambda2)
### result of no experiment
MAP_Omega_nex <- getMAP_Omega_Wishart(Y_no_exp, 0*X_r, B0 %*% Sigma, phi, lambda, Lambda2)
#MAP_Omega_nex <- solve(cov(Y_no_exp))
### save random designs and no exp
MGIG_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mrc)
MGIG_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mru)
Wishart_random_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wrc)
Wishart_random_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_wru)
no_exp[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_nex)
## active learning
# cat("  step :" , i_step, " D-optimal Design..\n")
# X_al_mau <- Design_D_opt(MAP_B_mau, solve(MAP_Omega_mau),
#                          phi, Lambda2, lambda, step_size, X_mau)
# X_al_mac <-  Design_D_opt(MAP_B_mac, solve(MAP_Omega_mac),
#                           phi, Lambda1, lambda, step_size, X_mac)
#
# Y_al_mau <- simu_data(X_al_mau, B, Sigma)
# Y_al_mac <- simu_data(X_al_mac, B, Sigma)
#
# X_mau <- rbind(X_mau, X_al_mau)
# Y_mau <- rbind(Y_mau, Y_al_mau)
#
# X_mac <- rbind(X_mac, X_al_mac)
# Y_mac <- rbind(Y_mac, Y_al_mac)
#
#
# MAP_Omega_mac <- getMAP_Omega_MGIG(Y_mac, X_mac, B0, phi, psi,lambda, Lambda1)
# MAP_Omega_mau <- getMAP_Omega_MGIG(Y_mau, X_mac, B0, phi, psi,lambda, Lambda2)
#
# MAP_B_mac <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda1, MAP_Omega_mac)
# MAP_B_mau <- getMAP_B_MGIG(Y_mac, X_mac, B0, Lambda2,MAP_Omega_mau)
#
#
# MGIG_active_cert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mac)
# MGIG_active_uncert[i_rep,i_step] <- CARlasso:::stein_loss(Omega,MAP_Omega_mau)
write.csv(MGIG_active_cert,all_file_name[1],row.names = F)
write.csv(MGIG_random_cert,all_file_name[2],row.names = F)
write.csv(Wishart_random_cert,all_file_name[3],row.names = F)
write.csv(MGIG_active_uncert,all_file_name[4],row.names = F)
write.csv(MGIG_random_uncert,all_file_name[5],row.names = F)
write.csv(Wishart_random_uncert,all_file_name[6],row.names = F)
write.csv(no_exp,all_file_name[7],row.names = F)
plot_out <- data.frame(step = 0:n_steps * step_size + n_init,
mrc <- t(as.matrix(MGIG_random_cert[i_rep, ])),
mac <- t(as.matrix(MGIG_active_cert[i_rep, ])),
mru <- t(as.matrix(MGIG_random_uncert[i_rep, ])),
mau <- t(as.matrix(MGIG_active_uncert[i_rep, ])),
wrc <- t(as.matrix(Wishart_random_cert[i_rep, ])),
wru <- t(as.matrix(Wishart_random_uncert[i_rep, ])),
nex <- t(as.matrix(no_exp[i_rep, ])),
row.names = NULL)
matplot(plot_out[,1], plot_out[,2:8], type = "l",xlab = "sample size", ylab = "Stein's loss",lty = 1:7,col = 1:7)
legend("topright", legend = c("mrc","mac","mru","mau","wrc","wru","nex"),lty = 1:7,col = 1:7)
}
}
